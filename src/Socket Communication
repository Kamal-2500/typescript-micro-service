import org.json.JSONObject

data class User(val name: String, val age: Int) {
    fun toJson(): String {
        val jsonObject = JSONObject()
        jsonObject.put("name", name)
        jsonObject.put("age", age)
        return jsonObject.toString()
    }

    companion object {
        fun fromJson(json: String): User {
            val jsonObject = JSONObject(json)
            return User(
                jsonObject.getString("name"),
                jsonObject.getInt("age")
            )
        }
    }
}

------------

private fun handleClientConnection(clientSocket: Socket) {
    GlobalScope.launch(Dispatchers.IO) {
        try {
            // Reading JSON input from the client
            val inputReader = BufferedReader(InputStreamReader(clientSocket.getInputStream()))
            val clientJson = inputReader.readLine()
            val clientUser = User.fromJson(clientJson)
            println("Received user from client: $clientUser")

            // Creating a response object
            val responseUser = User("Hello, ${clientUser.name}", clientUser.age)
            val responseJson = responseUser.toJson()

            // Sending the response JSON back to the client
            val outputWriter = PrintWriter(clientSocket.getOutputStream(), true)
            outputWriter.println(responseJson)

            println("Sent response to client: $responseJson")
        } catch (e: Exception) {
            e.printStackTrace()
        } finally {
            clientSocket.close()
        }
    }
}

-------

import 'dart:convert';

class User {
  final String name;
  final int age;

  User({required this.name, required this.age});

  factory User.fromJson(String jsonString) {
    final json = jsonDecode(jsonString);
    return User(
      name: json['name'],
      age: json['age'],
    );
  }

  String toJson() {
    final json = {
      'name': name,
      'age': age,
    };
    return jsonEncode(json);
  }
}

-------

import 'dart:convert';
import 'dart:io';

void main() async {
  final socket = await Socket.connect('192.168.1.2', 8080); // Replace with your server's IP and port
  print('Connected to: ${socket.remoteAddress.address}:${socket.remotePort}');

  // Create and send the User object as JSON
  final user = User(name: 'Tony Stark', age: 45);
  socket.write('${user.toJson()}\n');

  // Listen for the response from the server
  socket.listen((data) {
    final responseJson = utf8.decode(data);
    final responseUser = User.fromJson(responseJson);
    print('Server: ${responseUser.name}, Age: ${responseUser.age}');
  });

  // Close the connection after some time
  await Future.delayed(Duration(seconds: 5));
  socket.close();
}

---------------

import java.io.BufferedReader
import java.io.InputStreamReader
import java.io.PrintWriter
import java.net.ServerSocket
import java.net.Socket

data class Client(val name: String, val socket: Socket)

class ServerSocketHandler : ServerApi {
    private var serverSocket: ServerSocket? = null
    private var isRunning: Boolean = false
    private val clients = mutableListOf<Client>() // Store client details including name

    override fun startServer(request: StartServerRequest) {
        val port = request.port
        Thread {
            try {
                serverSocket = ServerSocket(port)
                isRunning = true
                println("Server started on port $port")

                while (isRunning) {
                    val clientSocket = serverSocket!!.accept()
                    println("Client connected: ${clientSocket.inetAddress.hostAddress}")

                    // Assign a default name to the client and add to the list
                    val defaultName = "Client-${clientSocket.inetAddress.hostAddress}"
                    val newClient = Client(defaultName, clientSocket)
                    clients.add(newClient)

                    // Spawn a new thread to handle each client
                    Thread {
                        handleClientConnection(newClient)
                    }.start()
                }
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }.start()
    }

    private fun handleClientConnection(client: Client) {
        try {
            val inputReader = BufferedReader(InputStreamReader(client.socket.getInputStream()))
            val outputWriter = PrintWriter(client.socket.getOutputStream(), true)

            // Ask for the client's name upon connection
            outputWriter.println("Please enter your name:")
            val clientName = inputReader.readLine()
            if (clientName != null && clientName.isNotEmpty()) {
                // Update the client's name
                clients.find { it.socket == client.socket }?.apply {
                    clients.remove(this)
                    clients.add(Client(clientName, client.socket))
                }
                println("Client named: $clientName")
            }

            // Broadcast the new client joining
            broadcastMessage("$clientName has joined the chat")

            // Read and process messages from the client
            while (true) {
                val clientMessage = inputReader.readLine()
                if (clientMessage == null) {
                    // Client disconnected
                    println("$clientName disconnected")
                    break
                }

                // Broadcast the message to all clients
                broadcastMessage("$clientName: $clientMessage")
            }
        } catch (e: Exception) {
            e.printStackTrace()
        } finally {
            // Ensure the client socket is closed and removed from the list when disconnected
            clients.removeIf { it.socket == client.socket }
            client.socket.close()
            println("Connection closed with client: ${client.socket.inetAddress.hostAddress}")
        }
    }

    private fun broadcastMessage(message: String) {
        println("Broadcasting message: $message")
        clients.forEach { client ->
            try {
                val outputWriter = PrintWriter(client.socket.getOutputStream(), true)
                outputWriter.println(message)
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    override fun stopServer() {
        isRunning = false
        clients.forEach { it.socket.close() }
        serverSocket?.close()
        println("Server stopped")
    }

    override fun sendMessage(message: ClientMessage) {
        // Implement if needed
    }

    override fun receiveMessage(): ClientMessage {
        // Implement if needed
        return ClientMessage("")
    }
}
